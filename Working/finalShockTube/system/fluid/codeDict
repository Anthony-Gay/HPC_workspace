/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      codeDict;
} 

HPCFluidP
{
  code
  #{    
    const fvMesh& fluidMesh = db().parent().lookupObject<fvMesh>("fluid");
    const fvMesh& partMesh = db().parent().lookupObject<fvMesh>("particle");

    const volScalarField& pFluid = db().lookupObject<volScalarField>("p");     
    const volScalarField& pFluidOld=pFluid.oldTime();

    const volVectorField& momentum = partMesh.lookupObject<volVectorField>("momentum");
    const volScalarField& rhoN = partMesh.lookupObject<volScalarField>("rhoN");
    const volScalarField& rhoM = partMesh.lookupObject<volScalarField>("rhoM");
    const volScalarField& linearKE = partMesh.lookupObject<volScalarField>("linearKE");

  volVectorField U
    (
        IOobject
        (
            "UPart",
            partMesh.time().timeName(),
            partMesh,
            IOobject::NO_READ
        ),
        momentum/rhoM
    );

  volScalarField translationalT
    (
        IOobject
        (
            "TTranslationalPart",
            partMesh.time().timeName(),
            partMesh,
            IOobject::NO_READ
        ),
        2.0/(3.0*physicoChemical::k.value()*rhoN)*(linearKE - 0.5*rhoM*(U & U))
    );

    volScalarField pParticle
    (
        IOobject
        (
            "pParticle",
            partMesh.time().timeName(),
            partMesh,
            IOobject::NO_READ
        ),
        physicoChemical::k.value()*rhoN*translationalT
    );
    
    const label fluidIdx=fluidMesh.nCells()-1;
    const label particleIdx=0;
    const scalar w=0;//0.4; 
    
    /*Info<< nl << "FLUID BC";
    Info<< nl << "Expected Pressure: 1.1288316e2";
    Info<< nl << "Particle pressure: " << pParticle[particleIdx];
    Info<< nl << "Fluid pressure: " << pFluid[fluidIdx];
    Info<< nl << "Fluid old pressure: " << pFluidOld[fluidIdx];*/

    operator==((1-w)*pFluidOld[fluidIdx]+w*(0.5*pFluid[fluidIdx]+0.5*pParticle[particleIdx])); 

  #};
  
codeInclude
#{
  #include "constants.H"
  using namespace Foam::constant;
#};
}
   

HPCFluidT
{
  code
  #{    
    const fvMesh& fluidMesh = db().parent().lookupObject<fvMesh>("fluid");
    const fvMesh& partMesh = db().parent().lookupObject<fvMesh>("particle");

    const volScalarField& TFluid = db().lookupObject<volScalarField>("T");     
    const volScalarField& TFluidOld=TFluid.oldTime();

    const volVectorField& momentum = partMesh.lookupObject<volVectorField>("momentum");
    const volScalarField& rhoN = partMesh.lookupObject<volScalarField>("rhoN");
    const volScalarField& rhoM = partMesh.lookupObject<volScalarField>("rhoM");
    const volScalarField& linearKE = partMesh.lookupObject<volScalarField>("linearKE");
    const volScalarField& internalE = partMesh.lookupObject<volScalarField>("internalE");
    const volScalarField& iDof = partMesh.lookupObject<volScalarField>("iDof");

    volVectorField U
            (
                IOobject
                (
                    "U",
                    partMesh.time().timeName(),
                    partMesh,
                    IOobject::NO_READ
                ),
                momentum/rhoM
            );

    volScalarField overallT
            (
                IOobject
                (
                    "overallT",
                    partMesh.time().timeName(),
                    partMesh,
                    IOobject::NO_READ
                ),
                2.0/(physicoChemical::k.value()*(3.0*rhoN + iDof))
              *(linearKE - 0.5*rhoM*(U & U) + internalE)
            );


    const label fluidIdx=fluidMesh.nCells()-1;
    const label particleIdx=0;
    const scalar w=0;//0.4; 
    
    //Info<< nl << "FLUID TEMP BC";
    operator==((1-w)*TFluidOld[fluidIdx]+w*(0.5*TFluid[fluidIdx]+0.5*overallT[particleIdx])); 

  #};
  codeInclude
#{
  #include "constants.H"
  using namespace Foam::constant;
#};
}

HPCFluidU
{
  code
  #{    
    const fvMesh& fluidMesh = db().parent().lookupObject<fvMesh>("fluid");
    const fvMesh& partMesh = db().parent().lookupObject<fvMesh>("particle");

    const volVectorField& UFluid = db().lookupObject<volVectorField>("U");     
    const volVectorField& UFluidOld=UFluid.oldTime();
   
    const volVectorField& momentum = partMesh.lookupObject<volVectorField>("momentum");
    const volScalarField& rhoM = partMesh.lookupObject<volScalarField>("rhoM");

    volVectorField U
            (
                IOobject
                (
                    "U",
                    partMesh.time().timeName(),
                    partMesh,
                    IOobject::NO_READ
                ),
                momentum/rhoM
            );

    const label fluidIdx=fluidMesh.nCells()-1;
    const label particleIdx=0;
    const scalar w=0;//0.4; 
    
    //Info<< nl << "FLUID TEMP BC";
    operator==((1-w)*UFluidOld[fluidIdx]+w*(0.5*UFluid[fluidIdx]+0.5*U[particleIdx])); 

  #};
}
