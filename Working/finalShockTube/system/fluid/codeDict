/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      codeDict;
} 

HPCFluid
{
  code
  #{    
    const fvMesh& partMeshRef = db().parent().lookupObject<fvMesh>("particle");

    const volScalarField& pFluid = db().lookupObject<volScalarField>("p");     
    const volScalarField& pFluidOld=pFluid.oldTime();

    const volVectorField& momentumRef = partMeshRef.lookupObject<volVectorField>("momentum");
    const volScalarField& rhoNRef = partMeshRef.lookupObject<volScalarField>("rhoN");
    const volScalarField& rhoMRef = partMeshRef.lookupObject<volScalarField>("rhoM");
    const volScalarField& linearKERef = partMeshRef.lookupObject<volScalarField>("linearKE");

  volVectorField URef
    (
        IOobject
        (
            "UPart",
            partMeshRef.time().timeName(),
            partMeshRef,
            IOobject::NO_READ
        ),
        momentumRef/rhoMRef
    );

  volScalarField translationalTRef
    (
        IOobject
        (
            "TTranslationalPart",
            partMeshRef.time().timeName(),
            partMeshRef,
            IOobject::NO_READ
        ),
        2.0/(3.0*physicoChemical::k.value()*rhoNRef)*(linearKERef - 0.5*rhoMRef*(URef & URef))
    );

    volScalarField pParticle
    (
        IOobject
        (
            "pParticle",
            partMeshRef.time().timeName(),
            partMeshRef,
            IOobject::NO_READ
        ),
        physicoChemical::k.value()*rhoNRef*translationalTRef
    );
    
    const label fluidIdx=99;
    const label particleIdx=0;
    const scalar w=0.75; 

    operator==((1-w)*pFluidOld[fluidIdx]+w*(0.5*pFluid[fluidIdx]+0.5*pParticle[particleIdx])); 

  #};

  codeInclude
#{
  #include "constants.H"
  using namespace Foam::constant;
#};
}
      